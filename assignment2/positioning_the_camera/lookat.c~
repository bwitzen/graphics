/* *****************************************************************************
 *
 * Computer Graphics - University of Amsterdam
 * Assignment 2.3
 *
 * Lorenzo Liberatore (10415459) <l.liberatore@gmail.com>
 * Ben Witzen (10189459) <benwitzen@live.nl>
 * Feb 8, 2013
 *
 * Implements glLookAt
 *
 * ************************************************************************** */
 
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <stdio.h>
#include <math.h>


/*
 * Computes the cross product of vectors A and B, and stores it in vector C
 */

void outProduct(GLdouble *a, GLdouble *b, GLdouble *c) {
    c[0] = a[1] * b[2] - a[2] * b[1];
    c[1] = a[2] * b[0] - a[0] * b[2];
    c[2] = a[0] * b[1] - a[1] * b[0];
}


/*
 * Normalizes the vector A
 */

void normalize(GLdouble *a) {
    GLdouble len = sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    a[0] /= len;
    a[1] /= len;
    a[2] /= len;
}

/* ANSI C/ISO C89 does not specify this constant (?) */
#ifndef M_PI
#define M_PI           3.14159265358979323846  /* pi */
#endif

void myLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ,
              GLdouble centerX, GLdouble centerY, GLdouble centerZ,
              GLdouble upX, GLdouble upY, GLdouble upZ) {
      /* 
    // store the single GLdoubles as vectors 
    GLdouble eye[3], up[3], center[3];
    eye[0] = eyeX;
    eye[1] = eyeY;
    eye[2] = eyeZ;
    center[0] = centerX;
    center[1] = centerY;
    center[2] = centerZ;
    up[0] = upX;
    up[1] = upY;
    up[2] = upZ;
    
    GLdouble n[3], u[3], v[3];

    // compute n    
    n[0] = eye[0] - center[0];
    n[1] = eye[1] - center[1];
    n[2] = eye[2] - center[2];
    normalize(n);
    
    // compute u
    outProduct(up, n, u);
    normalize(u);
    
    // compute v
    outProduct(n, u, v);
    normalize(v);
    
    // compute the rotation matrix
    GLfloat R[16] =
    {
        u[0], v[0], n[0], 0.0,
        u[1], v[1], n[1], 0.0,
        u[2], v[2], n[2], 0.0,
        0.0,  0.0,  0.0,  1.0
    };

    // perform matrix calculations
    glMultMatrixf(R);    
    glTranslatef(eyeX, eyeY, eyeZ); 
    */
}

